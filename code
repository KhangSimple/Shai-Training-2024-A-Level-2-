{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":75492,"databundleVersionId":8320480,"sourceType":"competition"}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-28T10:27:17.833460Z","iopub.execute_input":"2024-04-28T10:27:17.834479Z","iopub.status.idle":"2024-04-28T10:27:17.842283Z","shell.execute_reply.started":"2024-04-28T10:27:17.834430Z","shell.execute_reply":"2024-04-28T10:27:17.841299Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/shai-training-2024-a-level-2/sample_submission.csv\n/kaggle/input/shai-training-2024-a-level-2/Valid.csv\n/kaggle/input/shai-training-2024-a-level-2/Train.csv\n/kaggle/input/shai-training-2024-a-level-2/Test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu' ","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:27:17.844170Z","iopub.execute_input":"2024-04-28T10:27:17.844446Z","iopub.status.idle":"2024-04-28T10:27:21.005658Z","shell.execute_reply.started":"2024-04-28T10:27:17.844422Z","shell.execute_reply":"2024-04-28T10:27:21.004636Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/shai-training-2024-a-level-2/Train.csv')\ntrain_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:27:21.007174Z","iopub.execute_input":"2024-04-28T10:27:21.007723Z","iopub.status.idle":"2024-04-28T10:27:22.947874Z","shell.execute_reply.started":"2024-04-28T10:27:21.007689Z","shell.execute_reply":"2024-04-28T10:27:22.946980Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"                                                text  label\n0  I grew up (b. 1965) watching and loving the Th...      0\n1  When I put this movie in my DVD player, and sa...      0\n2  Why do people who do not know what a particula...      0\n3  Even though I have great interest in Biblical ...      0\n4  Im a die hard Dads Army fan and nothing will e...      1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>I grew up (b. 1965) watching and loving the Th...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>When I put this movie in my DVD player, and sa...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Why do people who do not know what a particula...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Even though I have great interest in Biblical ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Im a die hard Dads Army fan and nothing will e...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"val_data = pd.read_csv('/kaggle/input/shai-training-2024-a-level-2/Valid.csv')\nval_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:27:22.949225Z","iopub.execute_input":"2024-04-28T10:27:22.949904Z","iopub.status.idle":"2024-04-28T10:27:23.133140Z","shell.execute_reply.started":"2024-04-28T10:27:22.949870Z","shell.execute_reply":"2024-04-28T10:27:23.131971Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                                                text  label\n0  It's been about 14 years since Sharon Stone aw...      0\n1  someone needed to make a car payment... this i...      0\n2  The Guidelines state that a comment must conta...      0\n3  This movie is a muddled mish-mash of clichés f...      0\n4  Before Stan Laurel became the smaller half of ...      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>It's been about 14 years since Sharon Stone aw...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>someone needed to make a car payment... this i...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The Guidelines state that a comment must conta...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>This movie is a muddled mish-mash of clichés f...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Before Stan Laurel became the smaller half of ...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import re\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\ndef preprocess_text(text):\n    # Convert to lowercase\n    text = text.lower()\n    # Remove URLs\n    text = re.sub(r'https?://\\S+|www\\.\\S+|http?://\\S+', '', text)\n    # Remove special characters, numbers, and punctuations\n    text = re.sub(r'\\W', ' ', text)\n    # Remove single characters\n    text = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', text)\n    # Remove single characters from the start\n    text = re.sub(r'\\^[a-zA-Z]\\s+', ' ', text)\n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    word_tokens = word_tokenize(text)\n    text = ' '.join([word for word in word_tokens if word not in stop_words])\n    return text\ntrain_data['cleaned_text'] = train_data['text'].apply(preprocess_text)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:27:23.137029Z","iopub.execute_input":"2024-04-28T10:27:23.137389Z","iopub.status.idle":"2024-04-28T10:28:50.857743Z","shell.execute_reply.started":"2024-04-28T10:27:23.137359Z","shell.execute_reply":"2024-04-28T10:28:50.856535Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"val_data['cleaned_text'] = val_data['text'].apply(preprocess_text)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:28:50.859013Z","iopub.execute_input":"2024-04-28T10:28:50.859374Z","iopub.status.idle":"2024-04-28T10:29:01.499895Z","shell.execute_reply.started":"2024-04-28T10:28:50.859335Z","shell.execute_reply":"2024-04-28T10:29:01.499159Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:01.501061Z","iopub.execute_input":"2024-04-28T10:29:01.501646Z","iopub.status.idle":"2024-04-28T10:29:01.511466Z","shell.execute_reply.started":"2024-04-28T10:29:01.501613Z","shell.execute_reply":"2024-04-28T10:29:01.510444Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"                                                text  label  \\\n0  I grew up (b. 1965) watching and loving the Th...      0   \n1  When I put this movie in my DVD player, and sa...      0   \n2  Why do people who do not know what a particula...      0   \n3  Even though I have great interest in Biblical ...      0   \n4  Im a die hard Dads Army fan and nothing will e...      1   \n\n                                        cleaned_text  \n0  grew 1965 watching loving thunderbirds mates s...  \n1  put movie dvd player sat coke chips expectatio...  \n2  people know particular time past like feel nee...  \n3  even though great interest biblical movies bor...  \n4  im die hard dads army fan nothing ever change ...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n      <th>cleaned_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>I grew up (b. 1965) watching and loving the Th...</td>\n      <td>0</td>\n      <td>grew 1965 watching loving thunderbirds mates s...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>When I put this movie in my DVD player, and sa...</td>\n      <td>0</td>\n      <td>put movie dvd player sat coke chips expectatio...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Why do people who do not know what a particula...</td>\n      <td>0</td>\n      <td>people know particular time past like feel nee...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Even though I have great interest in Biblical ...</td>\n      <td>0</td>\n      <td>even though great interest biblical movies bor...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Im a die hard Dads Army fan and nothing will e...</td>\n      <td>1</td>\n      <td>im die hard dads army fan nothing ever change ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"val_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:01.512544Z","iopub.execute_input":"2024-04-28T10:29:01.512806Z","iopub.status.idle":"2024-04-28T10:29:01.525921Z","shell.execute_reply.started":"2024-04-28T10:29:01.512783Z","shell.execute_reply":"2024-04-28T10:29:01.524988Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                                text  label  \\\n0  It's been about 14 years since Sharon Stone aw...      0   \n1  someone needed to make a car payment... this i...      0   \n2  The Guidelines state that a comment must conta...      0   \n3  This movie is a muddled mish-mash of clichés f...      0   \n4  Before Stan Laurel became the smaller half of ...      0   \n\n                                        cleaned_text  \n0  14 years since sharon stone awarded viewers le...  \n1  someone needed make car payment truly awful ma...  \n2  guidelines state comment must contain minimum ...  \n3  movie muddled mish mash clichés recent cinema ...  \n4  stan laurel became smaller half time greatest ...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n      <th>cleaned_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>It's been about 14 years since Sharon Stone aw...</td>\n      <td>0</td>\n      <td>14 years since sharon stone awarded viewers le...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>someone needed to make a car payment... this i...</td>\n      <td>0</td>\n      <td>someone needed make car payment truly awful ma...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The Guidelines state that a comment must conta...</td>\n      <td>0</td>\n      <td>guidelines state comment must contain minimum ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>This movie is a muddled mish-mash of clichés f...</td>\n      <td>0</td>\n      <td>movie muddled mish mash clichés recent cinema ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Before Stan Laurel became the smaller half of ...</td>\n      <td>0</td>\n      <td>stan laurel became smaller half time greatest ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_data_clean = train_data.drop('text', axis='columns')\ntrain_data_clean.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:01.527061Z","iopub.execute_input":"2024-04-28T10:29:01.527410Z","iopub.status.idle":"2024-04-28T10:29:01.544012Z","shell.execute_reply.started":"2024-04-28T10:29:01.527387Z","shell.execute_reply":"2024-04-28T10:29:01.543226Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   label                                       cleaned_text\n0      0  grew 1965 watching loving thunderbirds mates s...\n1      0  put movie dvd player sat coke chips expectatio...\n2      0  people know particular time past like feel nee...\n3      0  even though great interest biblical movies bor...\n4      1  im die hard dads army fan nothing ever change ...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>cleaned_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>grew 1965 watching loving thunderbirds mates s...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>put movie dvd player sat coke chips expectatio...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>people know particular time past like feel nee...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>even though great interest biblical movies bor...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>im die hard dads army fan nothing ever change ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"val_data_clean = val_data.drop('text', axis='columns')\nval_data_clean.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:01.545167Z","iopub.execute_input":"2024-04-28T10:29:01.545431Z","iopub.status.idle":"2024-04-28T10:29:01.555675Z","shell.execute_reply.started":"2024-04-28T10:29:01.545410Z","shell.execute_reply":"2024-04-28T10:29:01.554559Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   label                                       cleaned_text\n0      0  14 years since sharon stone awarded viewers le...\n1      0  someone needed make car payment truly awful ma...\n2      0  guidelines state comment must contain minimum ...\n3      0  movie muddled mish mash clichés recent cinema ...\n4      0  stan laurel became smaller half time greatest ...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>cleaned_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>14 years since sharon stone awarded viewers le...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>someone needed make car payment truly awful ma...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>guidelines state comment must contain minimum ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>movie muddled mish mash clichés recent cinema ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>stan laurel became smaller half time greatest ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"max_length = max([len(x.split(' ')) for x in train_data_clean['cleaned_text']])\nmax_length","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:28:34.221651Z","iopub.execute_input":"2024-04-28T11:28:34.222537Z","iopub.status.idle":"2024-04-28T11:28:34.571552Z","shell.execute_reply.started":"2024-04-28T11:28:34.222503Z","shell.execute_reply":"2024-04-28T11:28:34.570440Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"1440"},"metadata":{}}]},{"cell_type":"code","source":"max_length = max([len(x.split(' ')) for x in val_data_clean['cleaned_text']])\nmax_length","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:38:53.093551Z","iopub.execute_input":"2024-04-28T11:38:53.094005Z","iopub.status.idle":"2024-04-28T11:38:53.160483Z","shell.execute_reply.started":"2024-04-28T11:38:53.093952Z","shell.execute_reply":"2024-04-28T11:38:53.159341Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"862"},"metadata":{}}]},{"cell_type":"code","source":"import datasets\n\ntrain_datasets = datasets.Dataset.from_pandas(train_data_clean)\ntrain_datasets = train_datasets.rename_column('label', 'labels')\ntrain_datasets","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:01.556946Z","iopub.execute_input":"2024-04-28T10:29:01.557366Z","iopub.status.idle":"2024-04-28T10:29:02.741466Z","shell.execute_reply.started":"2024-04-28T10:29:01.557329Z","shell.execute_reply":"2024-04-28T10:29:02.740542Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['labels', 'cleaned_text'],\n    num_rows: 40000\n})"},"metadata":{}}]},{"cell_type":"code","source":"val_datasets = datasets.Dataset.from_pandas(val_data_clean)\nval_datasets = val_datasets.rename_column('label', 'labels')\nval_datasets","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:02.742629Z","iopub.execute_input":"2024-04-28T10:29:02.744421Z","iopub.status.idle":"2024-04-28T10:29:02.784920Z","shell.execute_reply.started":"2024-04-28T10:29:02.744393Z","shell.execute_reply":"2024-04-28T10:29:02.784183Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['labels', 'cleaned_text'],\n    num_rows: 5000\n})"},"metadata":{}}]},{"cell_type":"code","source":"from transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ntokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:02.786015Z","iopub.execute_input":"2024-04-28T10:29:02.786279Z","iopub.status.idle":"2024-04-28T10:29:06.058808Z","shell.execute_reply.started":"2024-04-28T10:29:02.786256Z","shell.execute_reply":"2024-04-28T10:29:06.057840Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/28.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"199c21c945314726824773cb34979df8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4590e3f6e2c045b58c34f3f6643f8e69"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7e71529ea0b141c38a668f46e1135166"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9f2cc3e21062430aba96573aa352114b"}},"metadata":{}}]},{"cell_type":"code","source":"def tokenize_text(data):\n    return tokenizer(\n        data['cleaned_text'],\n        padding=True,\n        truncation=True\n    )","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:06.062374Z","iopub.execute_input":"2024-04-28T10:29:06.062856Z","iopub.status.idle":"2024-04-28T10:29:06.070378Z","shell.execute_reply.started":"2024-04-28T10:29:06.062828Z","shell.execute_reply":"2024-04-28T10:29:06.069414Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"train_data_encoding = train_datasets.map(tokenize_text, batched = True)\ntrain_data_encoding","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:06.071722Z","iopub.execute_input":"2024-04-28T10:29:06.072172Z","iopub.status.idle":"2024-04-28T10:29:23.954706Z","shell.execute_reply.started":"2024-04-28T10:29:06.072138Z","shell.execute_reply":"2024-04-28T10:29:23.953818Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/40000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"637c83c359414467a52381c2ca26d48a"}},"metadata":{}},{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['labels', 'cleaned_text', 'input_ids', 'attention_mask'],\n    num_rows: 40000\n})"},"metadata":{}}]},{"cell_type":"code","source":"val_data_encoding = val_datasets.map(tokenize_text, batched = True)\nval_data_encoding","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:23.955806Z","iopub.execute_input":"2024-04-28T10:29:23.956145Z","iopub.status.idle":"2024-04-28T10:29:26.153096Z","shell.execute_reply.started":"2024-04-28T10:29:23.956120Z","shell.execute_reply":"2024-04-28T10:29:26.152128Z"},"trusted":true},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/5000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7729d605c86f413982793cb036253a78"}},"metadata":{}},{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['labels', 'cleaned_text', 'input_ids', 'attention_mask'],\n    num_rows: 5000\n})"},"metadata":{}}]},{"cell_type":"code","source":"model = AutoModelForSequenceClassification.from_pretrained('distilbert-base-uncased')","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:26.154147Z","iopub.execute_input":"2024-04-28T10:29:26.154438Z","iopub.status.idle":"2024-04-28T10:29:28.972885Z","shell.execute_reply.started":"2024-04-28T10:29:26.154413Z","shell.execute_reply":"2024-04-28T10:29:28.971983Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"92254e143cc140f49b06c1b4078e0730"}},"metadata":{}},{"name":"stderr","text":"Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import TrainingArguments, Trainer\n\ntraining_args = TrainingArguments(\n    output_dir = '/kaggle/working/distilbert_train',\n    per_device_train_batch_size=32,\n    per_device_eval_batch_size=16,\n    num_train_epochs=3,\n    weight_decay=0.01,\n    learning_rate=5e-5,\n    logging_steps=100,\n    logging_strategy='steps',\n    push_to_hub=True\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:29:28.974498Z","iopub.execute_input":"2024-04-28T10:29:28.975155Z","iopub.status.idle":"2024-04-28T10:29:38.318980Z","shell.execute_reply.started":"2024-04-28T10:29:28.975120Z","shell.execute_reply":"2024-04-28T10:29:38.317987Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stderr","text":"2024-04-28 10:29:30.598581: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-28 10:29:30.598676: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-28 10:29:30.716869: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install evaluate","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:31:12.687551Z","iopub.execute_input":"2024-04-28T10:31:12.687905Z","iopub.status.idle":"2024-04-28T10:31:26.645125Z","shell.execute_reply.started":"2024-04-28T10:31:12.687879Z","shell.execute_reply":"2024-04-28T10:31:26.643902Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Collecting evaluate\n  Downloading evaluate-0.4.1-py3-none-any.whl.metadata (9.4 kB)\nRequirement already satisfied: datasets>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.18.0)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from evaluate) (1.26.4)\nRequirement already satisfied: dill in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.3.8)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.1.4)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.31.0)\nRequirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from evaluate) (4.66.1)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from evaluate) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.70.16)\nRequirement already satisfied: fsspec>=2021.05.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]>=2021.05.0->evaluate) (2024.2.0)\nRequirement already satisfied: huggingface-hub>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.22.2)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from evaluate) (21.3)\nCollecting responses<0.19 (from evaluate)\n  Downloading responses-0.18.0-py3-none-any.whl.metadata (29 kB)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (3.13.1)\nRequirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (15.0.2)\nRequirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (0.6)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (3.9.1)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (6.0.1)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.7.0->evaluate) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->evaluate) (3.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (2024.2.2)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2023.4)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (23.2.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.9.3)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.4.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.3.1)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (4.0.3)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->evaluate) (1.16.0)\nDownloading evaluate-0.4.1-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.1/84.1 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading responses-0.18.0-py3-none-any.whl (38 kB)\nInstalling collected packages: responses, evaluate\nSuccessfully installed evaluate-0.4.1 responses-0.18.0\n","output_type":"stream"}]},{"cell_type":"code","source":"import evaluate\naccuracy_metric = evaluate.load(\"accuracy\")\n\ndef compute_metrics(eval_pred):\n   \"\"\"Computes accuracy score for one epoch.\"\"\"\n   predictions, labels = eval_pred\n   predictions = np.argmax(predictions, axis=1)\n   return accuracy_metric.compute(predictions=predictions, references=labels)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:31:26.647671Z","iopub.execute_input":"2024-04-28T10:31:26.648088Z","iopub.status.idle":"2024-04-28T10:31:27.525863Z","shell.execute_reply.started":"2024-04-28T10:31:26.648050Z","shell.execute_reply":"2024-04-28T10:31:27.525136Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/4.20k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cc5f907a63954cc8a45e382133db4f53"}},"metadata":{}}]},{"cell_type":"code","source":"!pip install --upgrade huggingface_hub","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:31:27.526838Z","iopub.execute_input":"2024-04-28T10:31:27.527089Z","iopub.status.idle":"2024-04-28T10:31:39.903804Z","shell.execute_reply.started":"2024-04-28T10:31:27.527067Z","shell.execute_reply":"2024-04-28T10:31:39.902805Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: huggingface_hub in /opt/conda/lib/python3.10/site-packages (0.22.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (3.13.1)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (2024.2.0)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (6.0.1)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (2.31.0)\nRequirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (4.66.1)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface_hub) (3.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub) (2024.2.2)\n","output_type":"stream"}]},{"cell_type":"code","source":"from huggingface_hub import notebook_login\nnotebook_login()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:31:39.906559Z","iopub.execute_input":"2024-04-28T10:31:39.907576Z","iopub.status.idle":"2024-04-28T10:31:39.936457Z","shell.execute_reply.started":"2024-04-28T10:31:39.907536Z","shell.execute_reply":"2024-04-28T10:31:39.935418Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba8ae217b2dc4f29a2ce370db2f24cde"}},"metadata":{}}]},{"cell_type":"code","source":"trainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_data_encoding,\n    eval_dataset=val_data_encoding,\n    compute_metrics=compute_metrics\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:32:03.547144Z","iopub.execute_input":"2024-04-28T10:32:03.547625Z","iopub.status.idle":"2024-04-28T10:32:04.606075Z","shell.execute_reply.started":"2024-04-28T10:32:03.547583Z","shell.execute_reply":"2024-04-28T10:32:04.605119Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/accelerate/accelerator.py:436: FutureWarning: Passing the following arguments to `Accelerator` is deprecated and will be removed in version 1.0 of Accelerate: dict_keys(['dispatch_batches', 'split_batches', 'even_batches', 'use_seedable_sampler']). Please pass an `accelerate.DataLoaderConfiguration` instead: \ndataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"trainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T10:32:06.578731Z","iopub.execute_input":"2024-04-28T10:32:06.579597Z","iopub.status.idle":"2024-04-28T11:19:58.135478Z","shell.execute_reply.started":"2024-04-28T10:32:06.579565Z","shell.execute_reply":"2024-04-28T11:19:58.134451Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.16.6"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240428_103215-06vzmhlo</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/khangy1203/huggingface/runs/06vzmhlo' target=\"_blank\">fresh-bush-26</a></strong> to <a href='https://wandb.ai/khangy1203/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/khangy1203/huggingface' target=\"_blank\">https://wandb.ai/khangy1203/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/khangy1203/huggingface/runs/06vzmhlo' target=\"_blank\">https://wandb.ai/khangy1203/huggingface/runs/06vzmhlo</a>"},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='1875' max='1875' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [1875/1875 47:20, Epoch 3/3]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>100</td>\n      <td>0.405900</td>\n    </tr>\n    <tr>\n      <td>200</td>\n      <td>0.295700</td>\n    </tr>\n    <tr>\n      <td>300</td>\n      <td>0.285500</td>\n    </tr>\n    <tr>\n      <td>400</td>\n      <td>0.247000</td>\n    </tr>\n    <tr>\n      <td>500</td>\n      <td>0.241600</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.234200</td>\n    </tr>\n    <tr>\n      <td>700</td>\n      <td>0.164900</td>\n    </tr>\n    <tr>\n      <td>800</td>\n      <td>0.146000</td>\n    </tr>\n    <tr>\n      <td>900</td>\n      <td>0.141800</td>\n    </tr>\n    <tr>\n      <td>1000</td>\n      <td>0.143300</td>\n    </tr>\n    <tr>\n      <td>1100</td>\n      <td>0.144100</td>\n    </tr>\n    <tr>\n      <td>1200</td>\n      <td>0.146600</td>\n    </tr>\n    <tr>\n      <td>1300</td>\n      <td>0.099500</td>\n    </tr>\n    <tr>\n      <td>1400</td>\n      <td>0.063700</td>\n    </tr>\n    <tr>\n      <td>1500</td>\n      <td>0.076100</td>\n    </tr>\n    <tr>\n      <td>1600</td>\n      <td>0.059000</td>\n    </tr>\n    <tr>\n      <td>1700</td>\n      <td>0.071800</td>\n    </tr>\n    <tr>\n      <td>1800</td>\n      <td>0.063300</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n","output_type":"stream"},{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=1875, training_loss=0.16424490000406902, metrics={'train_runtime': 2871.1858, 'train_samples_per_second': 41.795, 'train_steps_per_second': 0.653, 'total_flos': 1.589608783872e+16, 'train_loss': 0.16424490000406902, 'epoch': 3.0})"},"metadata":{}}]},{"cell_type":"code","source":"test_data = pd.read_csv('/kaggle/input/shai-training-2024-a-level-2/Test.csv')\ntest_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:21:30.590888Z","iopub.execute_input":"2024-04-28T11:21:30.591761Z","iopub.status.idle":"2024-04-28T11:21:30.769802Z","shell.execute_reply.started":"2024-04-28T11:21:30.591729Z","shell.execute_reply":"2024-04-28T11:21:30.768000Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"   id                                               text  label\n0   0  I always wrote this series off as being a comp...    NaN\n1   1  1st watched 12/7/2002 - 3 out of 10(Dir-Steve ...    NaN\n2   2  This movie was so poorly written and directed ...    NaN\n3   3  The most interesting thing about Miryang (Secr...    NaN\n4   4  when i first read about \"berlin am meer\" i did...    NaN","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>I always wrote this series off as being a comp...</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1st watched 12/7/2002 - 3 out of 10(Dir-Steve ...</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>This movie was so poorly written and directed ...</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>The most interesting thing about Miryang (Secr...</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>when i first read about \"berlin am meer\" i did...</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data['cleaned_text'] = test_data['text'].apply(preprocess_text)\ntest_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:22:17.944689Z","iopub.execute_input":"2024-04-28T11:22:17.945076Z","iopub.status.idle":"2024-04-28T11:22:28.766747Z","shell.execute_reply.started":"2024-04-28T11:22:17.945048Z","shell.execute_reply":"2024-04-28T11:22:28.765870Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"   id                                               text  label  \\\n0   0  I always wrote this series off as being a comp...    NaN   \n1   1  1st watched 12/7/2002 - 3 out of 10(Dir-Steve ...    NaN   \n2   2  This movie was so poorly written and directed ...    NaN   \n3   3  The most interesting thing about Miryang (Secr...    NaN   \n4   4  when i first read about \"berlin am meer\" i did...    NaN   \n\n                                        cleaned_text  \n0  always wrote series complete stink fest jim be...  \n1  1st watched 12 7 2002 3 10 dir steve purcell t...  \n2  movie poorly written directed fell asleep 30 m...  \n3  interesting thing miryang secret sunshine acto...  \n4  first read berlin meer expect much thought rig...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>text</th>\n      <th>label</th>\n      <th>cleaned_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>I always wrote this series off as being a comp...</td>\n      <td>NaN</td>\n      <td>always wrote series complete stink fest jim be...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1st watched 12/7/2002 - 3 out of 10(Dir-Steve ...</td>\n      <td>NaN</td>\n      <td>1st watched 12 7 2002 3 10 dir steve purcell t...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>This movie was so poorly written and directed ...</td>\n      <td>NaN</td>\n      <td>movie poorly written directed fell asleep 30 m...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>The most interesting thing about Miryang (Secr...</td>\n      <td>NaN</td>\n      <td>interesting thing miryang secret sunshine acto...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>when i first read about \"berlin am meer\" i did...</td>\n      <td>NaN</td>\n      <td>first read berlin meer expect much thought rig...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data_clean = test_data.drop(['text','label'], axis = 'columns')\ntest_data_clean.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:23:09.905104Z","iopub.execute_input":"2024-04-28T11:23:09.905792Z","iopub.status.idle":"2024-04-28T11:23:09.920218Z","shell.execute_reply.started":"2024-04-28T11:23:09.905759Z","shell.execute_reply":"2024-04-28T11:23:09.919229Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"   id                                       cleaned_text\n0   0  always wrote series complete stink fest jim be...\n1   1  1st watched 12 7 2002 3 10 dir steve purcell t...\n2   2  movie poorly written directed fell asleep 30 m...\n3   3  interesting thing miryang secret sunshine acto...\n4   4  first read berlin meer expect much thought rig...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>cleaned_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>always wrote series complete stink fest jim be...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1st watched 12 7 2002 3 10 dir steve purcell t...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>movie poorly written directed fell asleep 30 m...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>interesting thing miryang secret sunshine acto...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>first read berlin meer expect much thought rig...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_datasets = datasets.Dataset.from_pandas(test_data_clean)\ntest_datasets","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:24:22.017875Z","iopub.execute_input":"2024-04-28T11:24:22.018252Z","iopub.status.idle":"2024-04-28T11:24:22.055108Z","shell.execute_reply.started":"2024-04-28T11:24:22.018225Z","shell.execute_reply":"2024-04-28T11:24:22.054213Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['id', 'cleaned_text'],\n    num_rows: 5000\n})"},"metadata":{}}]},{"cell_type":"code","source":"test_data_encoding = test_datasets.map(tokenize_text,batched = True)\ntest_data_encoding","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:29:11.969435Z","iopub.execute_input":"2024-04-28T11:29:11.969803Z","iopub.status.idle":"2024-04-28T11:29:14.453784Z","shell.execute_reply.started":"2024-04-28T11:29:11.969777Z","shell.execute_reply":"2024-04-28T11:29:14.452643Z"},"trusted":true},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/5000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c6bdf7f03d2943de96598c38ced7fa83"}},"metadata":{}},{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"Dataset({\n    features: ['id', 'cleaned_text', 'input_ids', 'attention_mask'],\n    num_rows: 5000\n})"},"metadata":{}}]},{"cell_type":"code","source":"test_prediction = trainer.predict(test_data_encoding)\ntest_prediction","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:30:52.562142Z","iopub.execute_input":"2024-04-28T11:30:52.562544Z","iopub.status.idle":"2024-04-28T11:31:39.925622Z","shell.execute_reply.started":"2024-04-28T11:30:52.562514Z","shell.execute_reply":"2024-04-28T11:31:39.924520Z"},"trusted":true},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"PredictionOutput(predictions=array([[-1.2398108,  0.8912381],\n       [ 2.879218 , -2.1428716],\n       [ 3.8969152, -2.8901615],\n       ...,\n       [ 3.3792653, -2.5294635],\n       [ 3.8265264, -2.8099701],\n       [ 0.8164801, -0.6961405]], dtype=float32), label_ids=None, metrics={'test_runtime': 47.3488, 'test_samples_per_second': 105.599, 'test_steps_per_second': 3.316})"},"metadata":{}}]},{"cell_type":"code","source":"test_pre = np.argmax(test_prediction.predictions, axis = 1)\ntest_pre","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:32:50.170357Z","iopub.execute_input":"2024-04-28T11:32:50.171094Z","iopub.status.idle":"2024-04-28T11:32:50.180440Z","shell.execute_reply.started":"2024-04-28T11:32:50.171062Z","shell.execute_reply":"2024-04-28T11:32:50.179434Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"array([1, 0, 0, ..., 0, 0, 0])"},"metadata":{}}]},{"cell_type":"code","source":"results = pd.DataFrame({'id': test_data['id'], 'label': test_pre})\nresults.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:33:51.146527Z","iopub.execute_input":"2024-04-28T11:33:51.147520Z","iopub.status.idle":"2024-04-28T11:33:51.160766Z","shell.execute_reply.started":"2024-04-28T11:33:51.147484Z","shell.execute_reply":"2024-04-28T11:33:51.159687Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"   id  label\n0   0      1\n1   1      0\n2   2      0\n3   3      0\n4   4      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"results.to_csv('/kaggle/working/submission.csv', index = False)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:34:47.489373Z","iopub.execute_input":"2024-04-28T11:34:47.489742Z","iopub.status.idle":"2024-04-28T11:34:47.505840Z","shell.execute_reply.started":"2024-04-28T11:34:47.489713Z","shell.execute_reply":"2024-04-28T11:34:47.505077Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"trainer.push_to_hub('sentiment_classification_model')","metadata":{"execution":{"iopub.status.busy":"2024-04-28T11:36:46.189424Z","iopub.execute_input":"2024-04-28T11:36:46.190071Z","iopub.status.idle":"2024-04-28T11:36:59.510144Z","shell.execute_reply.started":"2024-04-28T11:36:46.190036Z","shell.execute_reply":"2024-04-28T11:36:59.509086Z"},"trusted":true},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5de86fa3d82e424ab54b66f045df93b7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"events.out.tfevents.1714300326.e4ea3cfbc72d.34.0:   0%|          | 0.00/8.68k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8023566bc15f43708563bbd3fd0e0914"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Upload 2 LFS files:   0%|          | 0/2 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ca01175ef644428c81922b570e48fdb2"}},"metadata":{}},{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"CommitInfo(commit_url='https://huggingface.co/KhangSimple/distilbert_train/commit/e5037238aba5da7dfdf99ea4392969f728e15196', commit_message='sentiment_classification_model', commit_description='', oid='e5037238aba5da7dfdf99ea4392969f728e15196', pr_url=None, pr_revision=None, pr_num=None)"},"metadata":{}}]}]}